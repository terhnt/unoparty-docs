"use strict";(self.webpackChunkunoparty_docs=self.webpackChunkunoparty_docs||[]).push([[895],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2556:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},assets:function(){return u},toc:function(){return d},default:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:1},l="Overview",p={unversionedId:"develop/api/overview",id:"develop/api/overview",title:"Overview",description:"{",source:"@site/docs/develop/api/overview.md",sourceDirName:"develop/api",slug:"/develop/api/overview",permalink:"/unoparty-docs/docs/develop/api/overview",editUrl:"https://github.com/terhnt/unoparty-docs/tree/main/packages/create-docusaurus/templates/shared/docs/develop/api/overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"Develop"},u={},d=[{value:"Getting Started",id:"getting-started",level:2},{value:"General Format",id:"general-format",level:3},{value:"Authentication",id:"authentication",level:3},{value:"Example Implementations for JSON RPC API",id:"example-implementations-for-json-rpc-api",level:2},{value:"Python",id:"python",level:3},{value:"PHP",id:"php",level:3},{value:"curl",id:"curl",level:3},{value:"Linux",id:"linux",level:3},{value:"Windows",id:"windows",level:3},{value:"c# (RestSharp)",id:"c-restsharp",level:3},{value:"Go",id:"go",level:3},{value:"Ruby (Net::HTTP)",id:"ruby-nethttp",level:3},{value:"Example Implementations for REST API",id:"example-implementations-for-rest-api",level:2},{value:"Python",id:"python-1",level:3},{value:"curl",id:"curl-1",level:3},{value:"Example Parameters",id:"example-parameters",level:2},{value:"Signing Transactions Before Broadcasting",id:"signing-transactions-before-broadcasting",level:2},{value:"Terms &amp; Conventions",id:"terms--conventions",level:2},{value:"assets",id:"assets",level:3},{value:"subassets",id:"subassets",level:3},{value:"Quantities and balances",id:"quantities-and-balances",level:3},{value:"floats",id:"floats",level:3},{value:"Memos",id:"memos",level:3},{value:"Miscellaneous",id:"miscellaneous",level:2},{value:"Filtering Read API results",id:"filtering-read-api-results",level:3}],c={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"overview"},"Overview"),(0,i.kt)("h1",{id:"overview-1"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"unoparty-lib")," provides a JSON RPC 2.0-based API based off of that of Unobtanium Core. It is the primary means by which other applications should interact with the Unoparty network."),(0,i.kt)("p",null,"The API server is started either through the ",(0,i.kt)("a",{parentName:"p",href:"/docs/advanced/cli"},(0,i.kt)("inlineCode",{parentName:"a"},"CLI interface"))," or with the ",(0,i.kt)("a",{parentName:"p",href:"/docs/advanced/architecture"},(0,i.kt)("inlineCode",{parentName:"a"},"unoparty-lib"))," Python library. It listens on port ",(0,i.kt)("strong",{parentName:"p"},"4120")," by ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," (",(0,i.kt)("strong",{parentName:"p"},"14120")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"testnet"),") and requires HTTP Basic Authentication to connect."),(0,i.kt)("p",null,"The API includes numerous information retrieval methods, most of which begin with ",(0,i.kt)("inlineCode",{parentName:"p"},"get_"),", as well as several ",(0,i.kt)("inlineCode",{parentName:"p"},"create_")," methods which create new Unoparty transactions. While the ",(0,i.kt)("inlineCode",{parentName:"p"},"get_")," type methods simply return the requested information, the ",(0,i.kt)("inlineCode",{parentName:"p"},"create_")," methods return unsigned raw transactions which must then be signed and broadcast on the Unobtanium network. This means that while ",(0,i.kt)("inlineCode",{parentName:"p"},"unoparty-server")," requires Unobtanium Core and uses it for retieval and parsing of blockchain data, it and this API do not require Unobtanium Core's wallet functionality for private key storage and transaction signing. Transaction signing and broadcast can thus be accomplished using whatever means the developer sees fit (including using Unobtanium core's APIs if desired, or a library like Bitcore, or a service like blockchain.info, and so on)."),(0,i.kt)("p",null,"In addition to the JSON RPC API, ",(0,i.kt)("inlineCode",{parentName:"p"},"unoparty-lib")," provides a complementary RESTful API also based off of that of Unobtanium Core's design. This REST API is still under development and will include more functionality in the future, and listens on the same port as JSON RPC one."),(0,i.kt)("h2",{id:"getting-started"},"Getting Started"),(0,i.kt)("p",null,"By default, the server will listen on port ",(0,i.kt)("inlineCode",{parentName:"p"},"4120")," (if on mainnet) or port ",(0,i.kt)("inlineCode",{parentName:"p"},"14120")," (on testnet) for API requests."),(0,i.kt)("p",null,"Note that the main API is built on JSON-RPC 2.0, not 1.1. JSON-RPC itself is pretty lightweight, and API requests are made via a HTTP POST request to ",(0,i.kt)("inlineCode",{parentName:"p"},"/api/")," (note the trailing slash), with JSON-encoded data passed as the POST body."),(0,i.kt)("p",null,"The requests to the secondary REST API are made via HTTP GET to ",(0,i.kt)("inlineCode",{parentName:"p"},"/rest/"),", with request action and parameters encoded in the URL."),(0,i.kt)("h3",{id:"general-format"},"General Format"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"JSON-RPC"),(0,i.kt)("br",{parentName:"p"}),"\n","All requests must have POST data that is JSON encoded. Here's an example of the POST data for a valid API request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n  "method": "get_sends",\n  "params": {"order_by": "tx_hash",\n             "order_dir": "asc",\n             "start_block": 280537,\n             "end_block": 280539},\n  "jsonrpc": "2.0",\n  "id": 0\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"jsonrpc")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," properties are requirements under the JSON-RPC 2.0 spec."),(0,i.kt)("p",null,"You should note that the data in ",(0,i.kt)("inlineCode",{parentName:"p"},"params")," is a JSON object (e.g. mapping), not an array. In other words, ",(0,i.kt)("strong",{parentName:"p"},"the API only supports named arguments, not positional arguments"),' (e.g. use {"argument1": "value1", "argument2": "value2"} instead of ','["value1", "value2"]',"). This is the case for safety and bug-minimization reasons."),(0,i.kt)("p",null,"For more information on JSON RPC, please see the ",(0,i.kt)("a",{parentName:"p",href:"http://www.jsonrpc.org/specification"},"JSON RPC 2.0 specification"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"REST"),(0,i.kt)("br",{parentName:"p"}),"\n","For REST API all requests are made via GET where query-specific arguments are encoded as URL parameters. Moreover, the same requests can be passed via HTTP POST in order to encrypt the transaction parameters. There are only two methods supported: ",(0,i.kt)("inlineCode",{parentName:"p"},"get")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"compose"),". The URL formats are as follows, respectively:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/rest/<table_name>/get?<filters>&op=<operator> /rest/<message_type>/compose?<transaction arguments>\n")),(0,i.kt)("h3",{id:"authentication"},"Authentication"),(0,i.kt)("p",null,"The API support HTTP basic authentication to use, which is enabled if and only if a password is set. ",(0,i.kt)("strong",{parentName:"p"},"The default user is 'unobtaniumrpc'"),"."),(0,i.kt)("h2",{id:"example-implementations-for-json-rpc-api"},"Example Implementations for JSON RPC API"),(0,i.kt)("p",null,"The following examples have authentication enabled and the ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," set to its default value of ",(0,i.kt)("inlineCode",{parentName:"p"},"'unobtaniumrpc'"),". The password is not set (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"'rpc'"),"). Ensure these values correspond to values in your unoparty-server's configuration file ",(0,i.kt)("inlineCode",{parentName:"p"},"'server.conf'"),"."),(0,i.kt)("p",null,"Submissions of examples in additional languages are welcome!"),(0,i.kt)("h3",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'import json\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nurl = "http://localhost:4120/api/"\nheaders = {\'content-type\': \'application/json\'}\nauth = HTTPBasicAuth(\'rpc\', PASSWORD)\n\npayload = {\n  "method": "get_running_info",\n  "params": {},\n  "jsonrpc": "2.0",\n  "id": 0\n}\nresponse = requests.post(url, data=json.dumps(payload), headers=headers, auth=auth)\nprint("Response: ", response.text)\n')),(0,i.kt)("h3",{id:"php"},"PHP"),(0,i.kt)("p",null,"With PHP, you use the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fguillot/JsonRPC"},"JsonRPC")," library."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<?php\nrequire 'JsonRPC/src/JsonRPC/Client.php';\nuse JsonRPC\\Client;\n$client = new Client('http://localhost:4120/api/');\n$client->authentication('rpc', PASSWORD);\n\n$result = $client->execute('get_balances', array('filters' => array('field' => 'address', 'op' => '==', 'value' => '1NFeBp9s5aQ1iZ26uWyiK2AYUXHxs7bFmB')));\nprint(\"get_balances result:\\n\");\nvar_dump($result);\n\n$result2 = $client->execute('get_running_info');\nprint(\"get_running_info result:\\n\");\nvar_dump($result2);\n?>\n")),(0,i.kt)("h3",{id:"curl"},"curl"),(0,i.kt)("p",null,"Remember to surround non-numeric parameter values with the double quotes, as per ",(0,i.kt)("a",{parentName:"p",href:"http://www.jsonrpc.org/specification#examples"},"JSON-RPC 2.0 examples"),". For example, ",(0,i.kt)("inlineCode",{parentName:"p"},'"order_by": "tx_hash"')," is correct and will work, ",(0,i.kt)("inlineCode",{parentName:"p"},"\"order_by\": 'tx_hash'")," won't."),(0,i.kt)("h3",{id:"linux"},"Linux"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'curl -X POST http://127.0.0.1:4120/api/ --user unobtaniumrpc:$PASSWORD -H \'Content-Type: application/json; charset=UTF-8\' -H \'Accept: application/json, text/javascript\' --data-binary \'{ "jsonrpc": "2.0", "id": 0, "method": "get_running_info" }\'\n')),(0,i.kt)("h3",{id:"windows"},"Windows"),(0,i.kt)("p",null,"On Windows, depending on implementation the above curl command may need to be formatted differently due to problems that Windows has with escapes. For example this particular format was found to work with curl 7.50.1 (x86_64-w64-mingw32) on Windows 10 (x64)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'curl -X POST http://127.0.0.1:4120/api/ --user rpc:$PASSWORD -H "Content-Type: application/json; charset=UTF-8" -H "Accept: application/json, text/javascript" --data-binary "{ \\"jsonrpc\\": \\"2.0\\", \\"id\\": 0, \\"method\\": \\"get_running_info\\" }"\n')),(0,i.kt)("h3",{id:"c-restsharp"},"c# (RestSharp)"),(0,i.kt)("p",null,"Authorization string in the example below is based on the default username/password."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'var client = new RestClient("http://127.0.0.1:4120/api/");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("cache-control", "no-cache");\nrequest.AddHeader("authorization", "Basic cnBjOjEyMzQ=");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\r\\n  \\"method\\": \\"get_running_info\\",\\r\\n  \\"params\\": {},\\r\\n  \\"jsonrpc\\": \\"2.0\\",\\r\\n  \\"id\\": 1\\r\\n}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n')),(0,i.kt)("h3",{id:"go"},"Go"),(0,i.kt)("p",null,"Authorization string in the example below is based on the default username/password."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package main\n\nimport (\n    "fmt"\n    "strings"\n    "net/http"\n    "io/ioutil"\n)\n\nfunc main() {\n\n    url := "http://127.0.0.1:4120/api/"\n\n    payload := strings.NewReader("{\\r\\n  \\"method\\": \\"get_running_info\\",\\r\\n  \\"params\\": {},\\r\\n  \\"jsonrpc\\": \\"2.0\\",\\r\\n  \\"id\\": 1\\r\\n}")\n\n    req, _ := http.NewRequest("POST", url, payload)\n\n    req.Header.Add("content-type", "application/json")\n    req.Header.Add("authorization", "Basic cnBjOjEyMzQ=")\n    req.Header.Add("cache-control", "no-cache")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}\n')),(0,i.kt)("h3",{id:"ruby-nethttp"},"Ruby (Net::HTTP)"),(0,i.kt)("p",null,"Authorization string in the example below is based on the default username/password."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://127.0.0.1:4120/api/")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["content-type"] = \'application/json\'\nrequest["authorization"] = \'Basic cnBjOjEyMzQ=\'\nrequest["cache-control"] = \'no-cache\'\nrequest.body = "{\\r\\n  \\"method\\": \\"get_running_info\\",\\r\\n  \\"params\\": {},\\r\\n  \\"jsonrpc\\": \\"2.0\\",\\r\\n  \\"id\\": 1\\r\\n}"\n\nresponse = http.request(request)\nputs response.read_body\n')),(0,i.kt)("h2",{id:"example-implementations-for-rest-api"},"Example Implementations for REST API"),(0,i.kt)("p",null,"The following examples don't use authentication as with default settings."),(0,i.kt)("h3",{id:"python-1"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"import requests\n\nurl = \"http://localhost:4120/rest/\"\nheaders = {'content-type': 'application/json'}\n\nquery = 'sends/get?source=uVVuwXm2mDK9pr9XkWT5k7ihQyoSC8y2MW&destination=uNopartyXburnXXXXXXXXXXXXXXXWJmsqn&op=AND'\n\nresponse = requests.get(url + query, headers=headers)\nprint(\"Response: \", response.text)\n")),(0,i.kt)("h3",{id:"curl-1"},"curl"),(0,i.kt)("p",null,"These examples use the default username/password combination in URL."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Linux"),"  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'curl "http://unobtaniumrpc:rpc@127.0.0.1:4120/rest/sends/get?source=uVVuwXm2mDK9pr9XkWT5k7ihQyoSC8y2MW&destination=uNopartyXburnXXXXXXXXXXXXXXXWJmsqn&op=AND" -H "Content-Type: application/json; charset=UTF-8" -H "Accept: application/json"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Windows"),"\nThis example was created with curl 7.50.1 (x86_64-w64-mingw32) on Windows 10. For POST encryption add '-X POST'."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'curl "http://rpc:rpc@127.0.0.1:4120/rest/sends/get?source=uVVuwXm2mDK9pr9XkWT5k7ihQyoSC8y2MW&destination=uNopartyXburnXXXXXXXXXXXXXXXWJmsqn&op=AND" -H "Content-Type: application/json; charset=UTF-8" -H "Accept: application/json"\n')),(0,i.kt)("h2",{id:"example-parameters"},"Example Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fetch all balances for all assets for both of two addresses, using keyword-based arguments")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'  payload = {\n             "method": "get_balances",\n             "params": {\n                        "filters": [{"field": "address", "op": "==", "value": "14qqz8xpzzEtj6zLs3M1iASP7T4mj687yq"},\n                                    {"field": "address", "op": "==", "value": "1bLockjTFXuSENM8fGdfNUaWqiM4GPe7V"}],\n                        "filterop": "or"\n                       },\n             "jsonrpc": "2.0",\n             "id": 0\n            }\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Get all burns between blocks 280537 and 280539 where greater than .2 UNO was burned, sorting by tx_hash (ascending order)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'  payload = {\n             "method": "get_burns",\n             "params": {\n                        "filters": {"field": "burned", "op": ">", "value": 20000000},\n                        "filterop": "AND",\n                        "order_by": "tx_hash",\n                        "order_dir": "asc",\n                        "start_block": 280537,\n                        "end_block": 280539\n                       },\n             "jsonrpc": "2.0",\n             "id": 0\n            }\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fetch all debits for > 2 XUP between blocks 280537 and 280539, sorting the results by quantity (descending order)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'  payload = {\n             "method": "get_debits",\n             "params": {\n                        "filters": [{"field": "asset", "op": "==", "value": "XUP"},\n                                    {"field": "quantity", "op": ">", "value": 200000000}],\n                        "filterop": "AND",\n                        "order_by": "quantity",\n                        "order_dir": "desc"\n                       },\n             "jsonrpc": "2.0",\n             "id": 0\n            }\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Send 1 XUP (specified in satoshis) from one address to another.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'  payload = {\n             "method": "create_send",\n             "params": {\n                        "source": "uVVuwXm2mDK9pr9XkWT5k7ihQyoSC8y2MW",\n                        "destination": "uNopartyXburnXXXXXXXXXXXXXXXWJmsqn",\n                        "asset": "XUP",\n                        "quantity": 100000000\n                       },\n             "jsonrpc": "2.0",\n             "id": 0\n            }\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Issuance (indivisible)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'  payload = {\n             "method": "create_issuance",\n             "params": {\n                        "source": "uVVuwXm2mDK9pr9XkWT5k7ihQyoSC8y2MW",\n                        "asset": "MYASSET",\n                        "quantity": 1000,\n                        "description": "my asset is cool",\n                        "divisible": False\n                       },\n             "jsonrpc": "2.0",\n             "id": 0\n            }\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Transfer asset ownership")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'  payload = {\n             "method": "create_issuance",\n             "params": {\n                        "source": "uVVuwXm2mDK9pr9XkWT5k7ihQyoSC8y2MW",\n                        "transfer_destination": "uNopartyXburnXXXXXXXXXXXXXXXWJmsqn",\n                        "asset": "MYASSET",\n                        "quantity": 0\n                       },\n             "jsonrpc": "2.0",\n             "id": 0\n            }\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Lock asset")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'  payload = {\n             "method": "create_issuance",\n             "params": {\n                        "source": "uVVuwXm2mDK9pr9XkWT5k7ihQyoSC8y2MW",\n                        "asset": "MYASSET",\n                        "quantity": 0,\n                        "description": "LOCK"\n                       },\n             "jsonrpc": "2.0",\n             "id": 0\n            }\n')),(0,i.kt)("h2",{id:"signing-transactions-before-broadcasting"},"Signing Transactions Before Broadcasting"),(0,i.kt)("p",null,"Note: Before v9.49.4, the unoparty server API provided an interface to Unobtanium Core's signing functionality through the do_*, ",(0,i.kt)("inlineCode",{parentName:"p"},"sign_tx")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"broadcast_tx")," methods, which have all since been removed."),(0,i.kt)("p",null,"All ",(0,i.kt)("inlineCode",{parentName:"p"},"create_")," API calls return an unsigned raw transaction serialization as a hex-encoded string (i.e. the same format that ",(0,i.kt)("inlineCode",{parentName:"p"},"unobtaniumd")," returns with its raw transaction API calls). This raw transaction's inputs may be validated and then must be signed (i.e. via Unobtanium Core, a 3rd party Unobtanium library like Unocore(Bitcore fork), etc) and broadcast on the Unobtanium network."),(0,i.kt)("p",null,"The process of signing and broadcasting a transaction, from start to finish, depends somewhat on the wallet software used. Below are examples of how one might use a wallet to sign and broadcast an unsigned Unoparty transaction created with this API."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Unobtanium Core with Python")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#! /usr/bin/env python3\n\nfrom unopartylib.lib import util\nfrom unopartylib.lib import config\nfrom unopartylib.lib.backend import addrindexrs_uno\n\nconfig.TESTNET =\nconfig.RPC =\nconfig.BACKEND_URL =\nconfig.BACKEND_SSL_NO_VERIFY =\n\ndef unoparty_api(method, params):\n    return util.api(method, params)\n\ndef unobtanium_api(method, params):\n    return addrindexrs_uno.rpc(method, params)\n\ndef do_send(source, destination, asset, quantity, fee, encoding):\n    validateaddress = unobtanium_api('validateaddress', [source])\n    assert validateaddress['ismine']\n    pubkey = validateaddress['pubkey']\n    unsigned_tx = unoparty_api('create_send', {'source': source, 'destination': destination, 'asset': asset, 'quantity': quantity, 'pubkey': pubkey, 'allow_unconfirmed_inputs': True})\n    signed_tx = unobtanium_api('signrawtransaction', [unsigned_tx])['hex']\n    tx_hash = unobtanium_api('sendrawtransaction', [signed_tx])\n    return tx_hash\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Unobtanium Core with Javascript")," (Utilizing the Unowallet ",(0,i.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/terhnt/unowallet/master/src/js/util.bitcore.js"},"Bitcore wrapper code")," for brevity.)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<html>\n    <script src=\"https://raw.githubusercontent.com/bitpay/bitcore-lib/f031e1ddfbf0064ef503a28aada86c4fbf9a414c/bitcore-lib.min.js\"><\/script>\n    <script src=\"https://raw.githubusercontent.com/terhnt/unowallet/master/src/js/util.bitcore.js\"><\/script>\n    <script src=\"https://raw.githubusercontent.com/terhnt/unowallet/master/src/js/external/mnemonic.js\"><\/script>\n    <script>\n    unoparty_api = function(method, params) {\n        // call Unoparty API method via your prefered method\n    }\n\n    unobtanium_api = function(method, params) {\n        // call Unobtanium Core API method via your prefered method\n    }\n\n    // generate a passphrase\n    var m = new Mnemonic(128); //128 bits of entropy (12 word passphrase)\n    var words = m.toWords();\n    var passphrase = words.join(' ')\n\n    // generate private key, public key and address from the passphrase\n    wallet = new CWHierarchicalKey(passphrase);\n    var cwk = wallet.getAddressKey(i); // i the number of the address\n    var source = key.getAddress();\n    var pubkey = cwk.getPub()\n\n    // generate unsigned transaction\n    unsigned_hex = unoparty_api('create_send', {'source': source, 'destination': destination, 'asset': asset, 'quantity': quantity, 'pubkey': pubkey})\n\n    CWBitcore.signRawTransaction2(self.unsignedTx(), cwk, function(signedHex) {\n        unobtanium_api('sendrawtransaction', signedHex)\n    })\n    <\/script>\n</html>\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Unobtaniumjs-lib on javascript, signing a P2SH redeeming transaction")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// Assumes NodeJS runtime. Several libraries exist to replace the Buffer class on web browsers\nconst unobtanium = require('unobtaniumjs-lib')\n\nasync function signP2SHDataTX(wif, txHex) {\n  const network = unobtanium.networks.testnet // Change appropiately to your used network\n  const keyPair = unobtanium.ECPair.fromWIF(wif, network)\n  const dataTx = unobtanium.Transaction.fromHex(txHex)   // The unsigned second part of the 2 part P2SH transactions\n\n  const sigType = unobtanium.Transaction.SIGHASH_ALL // This shouldn't be changed unless you REALLY know what you're doing\n\n  for (let i=0; i < dataTx.ins.length; i++) {\n    const sigHash = dataTx.hashForSignature(i, unobtanium.script.decompile(dataTx.ins[i].script)[0], sigType)\n    const sig = keyPair.sign(sigHash)\n    const encodedSig = unobtanium.script.signature.encode(sig, sigType)\n    const compiled = unobtanium.script.compile([encodedSig])\n\n    dataTx.ins[i].script = Buffer.concat([compiled, dataTx.ins[i].script])\n  }\n\n  dataTx.ins[0].script = Buffer.concat([compiled, dataTx.ins[0].script])\n  return dataTx.toHex() // The resulting signed transaction in raw hex, ready to be broadcasted\n}\n")),(0,i.kt)("h2",{id:"terms--conventions"},"Terms & Conventions"),(0,i.kt)("h3",{id:"assets"},"assets"),(0,i.kt)("p",null,"Everywhere in the API an asset is referenced by its name, not its ID. See the ",(0,i.kt)("a",{parentName:"p",href:"/docs/advanced/protocol"},"Unoparty protocol specification")," for what constitutes a valid asset name. Examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"UNO"'),(0,i.kt)("li",{parentName:"ul"},'"XUP"'),(0,i.kt)("li",{parentName:"ul"},'"FOOBAR"'),(0,i.kt)("li",{parentName:"ul"},'"A7736697071037023001"')),(0,i.kt)("h3",{id:"subassets"},"subassets"),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"/docs/advanced/protocol"},"Unoparty protocol specification")," for what constitutes a valid subasset name. Examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"PIZZA.X"'),(0,i.kt)("li",{parentName:"ul"},'"PIZZA.REALLY-long-VALID-Subasset-NAME"')),(0,i.kt)("h3",{id:"quantities-and-balances"},"Quantities and balances"),(0,i.kt)("p",null,"Anywhere where an quantity is specified, it is specified in satoshis (if a divisible asset), or as whole numbers (if an indivisible asset). To convert satoshis to floating-point, simply cast to float and divide by 100,000,000."),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"4381030000 = 43.8103 (if divisible asset)"),(0,i.kt)("li",{parentName:"ul"},"4381030000 = 4381030000 (if indivisible asset)\n",(0,i.kt)("strong",{parentName:"li"},"NOTE:")," XUP and UNO themselves are divisible assets.")),(0,i.kt)("h3",{id:"floats"},"floats"),(0,i.kt)("p",null,"Floats are ratios or floating point values with six decimal places of precision, used in bets and dividends."),(0,i.kt)("h3",{id:"memos"},"Memos"),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"/docs/advanced/protocol"},"Unoparty protocol specification")," for what constitutes a valid memo. Examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"for pizza"'),(0,i.kt)("li",{parentName:"ul"},'"1ca6"')),(0,i.kt)("h2",{id:"miscellaneous"},"Miscellaneous"),(0,i.kt)("h3",{id:"filtering-read-api-results"},"Filtering Read API results"),(0,i.kt)("p",null,"The Unoparty API aims to be as simple and flexible as possible. To this end, it includes a straightforward way to filter the results of most Read API to get the data you want, and only that."),(0,i.kt)("p",null,"For each Read API function that supports it, a ",(0,i.kt)("inlineCode",{parentName:"p"},"filters")," parameter exists. To apply a filter to a specific data field, specify an object (e.g. dict in Python) as this parameter, with the following members:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"field: The field to filter on. Must be a valid field in the type of object being returned"),(0,i.kt)("li",{parentName:"ul"},"op: The comparison operation to perform. One of: ",(0,i.kt)("inlineCode",{parentName:"li"},'"==", "!=", ">", "<", ">=", "<=", "IN", "LIKE", "NOT IN", "NOT LIKE"')),(0,i.kt)("li",{parentName:"ul"},"value: The value that the field will be compared against. Must be the same data type as the field is (e.g. if the field is a string, the value must be a string too)\nIf you want to filter by multiple fields, then you can specify a list of filter objects. To this end, API functions that take ",(0,i.kt)("inlineCode",{parentName:"li"},"filters")," also take a ",(0,i.kt)("inlineCode",{parentName:"li"},"filterop")," parameter, which determines how the filters are combined when multiple filters are specified. It defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},'"and"'),", meaning that filters are ANDed togeher (and that any match must satisfy all of them). You can also specify ",(0,i.kt)("inlineCode",{parentName:"li"},'"or"')," as an alternative setting, which would mean that filters are ORed together, and that any match must satisfy only one of them.")),(0,i.kt)("p",null,"To disable filtering, you can just not specify the filter argument (if using keyword-based arguments), or, if using positional arguments, just pass ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"[]")," (empty list) for the parameter."),(0,i.kt)("p",null,"For examples of filtering in-use, please see the ",(0,i.kt)("a",{parentName:"p",href:"#example-parameters"},"examples"),"."),(0,i.kt)("p",null,"NOTE: Note that with strings being compared, operators like ",(0,i.kt)("inlineCode",{parentName:"p"},">=")," do a lexigraphic string comparison (which compares, letter to letter, based on the ASCII ordering for individual characters. For more information on the specific comparison logic used, please see ",(0,i.kt)("a",{parentName:"p",href:"http://www.sqlite.org/lang_expr.html"},"this page"),"."))}m.isMDXComponent=!0}}]);