"use strict";(self.webpackChunkunoparty_docs=self.webpackChunkunoparty_docs||[]).push([[9],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return p}});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=d(a),p=s,m=c["".concat(l,".").concat(p)]||c[p]||h[p]||i;return a?n.createElement(m,r(r({ref:t},u),{},{components:a})):n.createElement(m,r({ref:t},u))}));function p(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=a.length,r=new Array(i);r[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,r[1]=o;for(var d=2;d<i;d++)r[d]=a[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},3483:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return d},assets:function(){return u},toc:function(){return h},default:function(){return p}});var n=a(7462),s=a(3366),i=(a(7294),a(3905)),r=["components"],o={sidebar_position:2},l="Protocol Specification",d={unversionedId:"advanced/protocol",id:"advanced/protocol",title:"Protocol Specification",description:"Summary",source:"@site/docs/advanced/protocol.md",sourceDirName:"advanced",slug:"/advanced/protocol",permalink:"/unoparty-docs/docs/advanced/protocol",editUrl:"https://github.com/terhnt/unoparty-docs/tree/main/packages/create-docusaurus/templates/shared/docs/advanced/protocol.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"advanced",previous:{title:"Platform Architecture",permalink:"/unoparty-docs/docs/advanced/architecture"},next:{title:"Command-line (CLI) Guide",permalink:"/unoparty-docs/docs/advanced/cli"}},u={},h=[{value:"Summary",id:"summary",level:2},{value:"Transactions",id:"transactions",level:2},{value:"Non\u2010Unoparty transactions",id:"nonunoparty-transactions",level:2},{value:"mempool transactions",id:"mempool-transactions",level:2},{value:"Subassets",id:"subassets",level:2},{value:"Message Types",id:"message-types",level:2},{value:"Send",id:"send",level:3},{value:"Order",id:"order",level:3},{value:"Issue",id:"issue",level:3},{value:"Broadcast",id:"broadcast",level:2},{value:"Bet",id:"bet",level:3},{value:"Dividend",id:"dividend",level:3},{value:"Burn",id:"burn",level:3},{value:"Cancel",id:"cancel",level:3},{value:"Destroy",id:"destroy",level:3},{value:"Dispenser",id:"dispenser",level:3}],c={toc:h};function p(e){var t=e.components,a=(0,s.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"protocol-specification"},"Protocol Specification"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Unoparty is a suite of financial tools in a protocol built on top of the Unobtanium blockchain and using the blockchain as a service for the reliable publication and timestamping of its messages."),(0,i.kt)("p",null,"The reference implementation is unoparty-lib, which is hosted at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/terhnt/unoparty-lib"},"GitHub"),"."),(0,i.kt)("p",null,"This document describes exclusively the latest version of the Unoparty protocol. For historical protocol changes, see the unoparty-lib ChangeLog."),(0,i.kt)("h2",{id:"transactions"},"Transactions"),(0,i.kt)("p",null,"Unoparty messages have the following components:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Source addresses"),(0,i.kt)("li",{parentName:"ul"},"Destination addresses (optional)"),(0,i.kt)("li",{parentName:"ul"},"A quantity of unobtaniums sent from the sources to the destinations, if it exists."),(0,i.kt)("li",{parentName:"ul"},"A fee, in unobtaniums, paid to the Unobtanium miners who include the transaction in a block."),(0,i.kt)("li",{parentName:"ul"},"Some \u2018data\u2019, imbedded in specially constructed transaction outputs.")),(0,i.kt)("p",null,"Every Unobtanium transaction carrying a Unoparty transaction has the following possible outputs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"zero or more destination outputs,"),(0,i.kt)("li",{parentName:"ul"},"zero or more data outputs, and optional change outputs.\nAll data outputs follow all destination outputs. Change outputs (outputs after the last data output) have no significance.")),(0,i.kt)("p",null,"For identification purposes, every Unoparty transaction\u2019s \u2018data\u2019 field is prefixed by the string ",(0,i.kt)("inlineCode",{parentName:"p"},"CNTRPRTY"),", encoded in UTF\u20108. This string is long enough that transactions with outputs containing pseudo\u2010random data cannot be mistaken for valid Unoparty transactions. In testing (i.e. using the TESTCOIN Unoparty network on any blockchain), this string is \u2018XX\u2019."),(0,i.kt)("p",null,"Unoparty data may be stored in three different types of outputs, or in some combinations of those formats. All of the data is obfuscated by ARC4 encryption using the transaction identifier (TXID) of the first unspent transaction output (UTXO) as the encryption key."),(0,i.kt)("p",null,"Multi\u2010signature data outputs are one\u2010of\u2010three outputs where the first public key is that of the sender, so that the value of the output is redeemable, and the second two public keys encode the data, zero\u2010padded and prefixed with a length byte."),(0,i.kt)("p",null,"The data may also be stored in ",(0,i.kt)("inlineCode",{parentName:"p"},"OP_RETURN")," outputs or as fake pubkeyhashes."),(0,i.kt)("p",null,"The existence of the destination outputs, and the significance of the size of the Unobtanium fee and the Unobtaniums transacted, depend on the Unoparty message type, which is determined by the four bytes in the data field that immediately follow the identification prefix. The rest of the data have a formatting specific to the message type, described in the source code."),(0,i.kt)("p",null,"The sources and destinations of a Unoparty transaction are Unobtanium addresses, and may be either ",(0,i.kt)("inlineCode",{parentName:"p"},"OP_CHECKSIG")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"OP_CHECKMULTISIG")," Unobtanium ScriptPubkeys."),(0,i.kt)("p",null,"All messages are parsed in order, one at a time, ignoring block boundaries."),(0,i.kt)("p",null,"Orders, bets, order matches, bet matches and rock\u2010paper\u2010scissor matches are expired at the end of blocks."),(0,i.kt)("h2",{id:"nonunoparty-transactions"},"Non\u2010Unoparty transactions"),(0,i.kt)("p",null,"unoparty-lib supports the construction of two kinds of transactions that are not themselves considered Unoparty transactions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"UNO sends"),(0,i.kt)("li",{parentName:"ul"},"UNO dividends to Unoparty assets")),(0,i.kt)("p",null,"Neither of these two transactions is constructed with a data field."),(0,i.kt)("h2",{id:"mempool-transactions"},"mempool transactions"),(0,i.kt)("p",null,"Always have block index = 9999999 (",(0,i.kt)("inlineCode",{parentName:"p"},"config.MEMPOOL_BLOCK_INDEX"),")."),(0,i.kt)("p",null,"DB changes never persist across sessions."),(0,i.kt)("p",null,"Assets\nAll assets except UNO and XUP have the following properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Asset name"),(0,i.kt)("li",{parentName:"ul"},"Asset ID"),(0,i.kt)("li",{parentName:"ul"},"Description"),(0,i.kt)("li",{parentName:"ul"},"Divisiblity"),(0,i.kt)("li",{parentName:"ul"},"Callability"),(0,i.kt)("li",{parentName:"ul"},"Call date (if callable)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"may be delayed with later issuances"))),(0,i.kt)("li",{parentName:"ul"},"Call price (if callable) (non\u2010negative)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"may be increased with later issuances")))),(0,i.kt)("p",null,"Newly registered asset names will be either (unique) strings of 4 to 12 uppercase Latin characters (inclusive) not beginning with \u2018A\u2019, or integers between 26^12 + 1 and 256^8 (inclusive), prefixed with \u2018A\u2019. Alphabetic asset names will carry a one\u2010time issuance fee (by burn) of 0.5 XUP and numeric asset names will be freely available. \u2018UNO\u2019 and \u2018XUP\u2019 are the only three\u2010character asset names. Example asset names: BBBB, A100000000000000000."),(0,i.kt)("p",null,"Assets may be either divisible or indivisible, and divisible assets are divisible to eight decimal places. Assets also come with descriptions, which may be up to 52 single-byte characters long and updated at any time."),(0,i.kt)("h2",{id:"subassets"},"Subassets"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Subasset names must meet following requirements :")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Begin with the parent asset name followed by a period (.)"),(0,i.kt)("li",{parentName:"ul"},"Contain at least 1 character following the parent asset name and a period (.) (e.g. PIZZA.x)"),(0,i.kt)("li",{parentName:"ul"},"Contain up to 250 characters in length including the parent asset name (e.g. PIZZA.REALLY-long-VALID-Subasset-NAME)"),(0,i.kt)("li",{parentName:"ul"},"Contain only characters ",(0,i.kt)("inlineCode",{parentName:"li"},"a-zA-Z0-9.-_@!")),(0,i.kt)("li",{parentName:"ul"},"Cannot end with a period (.)"),(0,i.kt)("li",{parentName:"ul"},"Cannot contain multiple consecutive periods (..)")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"A subasset may only be issued from the same address that owns the parent asset at the time of the issuance")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"A subasset may be transferred to a new owner address after initial issuance")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"A subasset has an anti-spam issuance cost of 0.25 XUP"))),(0,i.kt)("p",null,"Memos\nA Memo can be attached to a send transactions. When a shared public address is used for incoming transactions, a memo may be used to link an incoming payments with a specific user account identifier or invoice. Memos do not need to be unique. Multiple sends may have the same memo."),(0,i.kt)("p",null,"The Memo is a numeric value expressed in hexadecimal or a UTF-8 encoded text string. Valid memos are no more than 34 bytes long."),(0,i.kt)("p",null,"Transaction Statuses\nOffers (i.e. orders and bets) are given a status filled when their give_remaining, get_remaining, wager_remaining, counterwager_remaining, fee_provided_remaining or fee_required_remaining are no longer positive quantities."),(0,i.kt)("p",null,"Because order matches pending UNO payment may be expired, orders involving Unobtanium cannot be filled, but remain always with a status open."),(0,i.kt)("h2",{id:"message-types"},"Message Types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Send"),(0,i.kt)("li",{parentName:"ul"},"Order"),(0,i.kt)("li",{parentName:"ul"},"BTCPay"),(0,i.kt)("li",{parentName:"ul"},"Issue"),(0,i.kt)("li",{parentName:"ul"},"Broadcast"),(0,i.kt)("li",{parentName:"ul"},"Bet"),(0,i.kt)("li",{parentName:"ul"},"Dividend"),(0,i.kt)("li",{parentName:"ul"},"Burn"),(0,i.kt)("li",{parentName:"ul"},"Cancel"),(0,i.kt)("li",{parentName:"ul"},"Destroy"),(0,i.kt)("li",{parentName:"ul"},"Dispenser"),(0,i.kt)("li",{parentName:"ul"},"Melt (TBA)")),(0,i.kt)("h3",{id:"send"},"Send"),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"send")," message sends a quantity of any Unoparty asset from the source address to the destination address. If the sender does not hold a sufficient quantity of that asset at the time that the send message is parsed (in the sequence of transactions), then the send is considered an oversend."),(0,i.kt)("p",null,"Oversends are handled as follows:"),(0,i.kt)("p",null,"1) Oversends using the legacy send transaction type are valid and filled as much as they can be 2) Oversends using the new default enhanced send transaction type after block 489956 are invalid and none of the asset is sent"),(0,i.kt)("p",null,"unoparty-lib supports sending unobtaniums, for which no data output is used."),(0,i.kt)("h3",{id:"order"},"Order"),(0,i.kt)("p",null,"An \u2018order\u2019 is an offer to ",(0,i.kt)("em",{parentName:"p"},"give")," a particular quantity of a particular asset and get some quantity of some other asset in return. No distinction is drawn between a \u2018buy order\u2019 and a \u2018sell order\u2019. The assets being given are escrowed away immediately upon the order being parsed. That is, if someone wants to give 1 XUP for 2 UNO, then as soon as he publishes that order, his balance of XUP is reduced by one."),(0,i.kt)("p",null,"When an order is seen in the blockchain, the protocol attempts to match it, deterministically, with another open order previously seen. Two matched orders are called a \u2018order match\u2019. If either of a order match\u2019s constituent orders involve Unobtanium, then the order match is assigned the status \u2018pending\u2019 until the necessary UNOPay transaction is published. Otherwise, the trade is completed immediately, with the protocol itself assigning the participating addresses their new balances."),(0,i.kt)("p",null,"All orders are limit orders: an asking price is specified in the ratio of how much of one would like to get and give; an order is matched to the open order with the best price below the limit, and the order match is made at that price. That is, if there is one open order to sell at .11 XUP/ASST, another at .12 XUP/ASST, and another at .145 XUP/UNO, then a new order to buy at .14 XUP/ASST will be matched to the first sell order first, and the XUP and UNO will be traded at a price of .11 XUP/ASST, and then if any are left, they\u2019ll be sold at .12 XUP/ASST. If two existing orders have the same price, then the one made earlier will match first."),(0,i.kt)("p",null,"All orders allow for partial execution; there are no all\u2010or\u2010none orders. If, in the previous example, the party buying the unobtaniums wanted to buy more than the first sell offer had available, then the rest of the buy order would be filled by the latter existing order. After all possible order matches are made, the current (buy) order is listed as an open order itself. If there exist multiple open orders at the same price, then order that was placed earlier is matched first."),(0,i.kt)("p",null,"Open orders expire after they have been open for a user\u2010specified number of blocks. When an order expires, all escrowed funds are returned to the parties that originally had them."),(0,i.kt)("p",null,"Order Matches waiting for Unobtanium payments expire after twenty blocks; the constituent orders are replenished."),(0,i.kt)("p",null,"In general, there can be no such thing as a fake order, because the assets that each party is offering are stored in escrow. However, it is impossible to escrow unobtaniums, so those attempting to buy unobtaniums may ask that only orders which pay a fee in unobtaniums to Unobtanium miners be matched to their own. On the other hand, when creating an order to sell unobtaniums, a user may pay whatever fee he likes. Partial orders pay partial fees. These fees are designated in the code as fee_required and fee_provided, and as orders involving UNO are matched (expired), these fees (required and provided) are debited (sometimes replenished), in proportion to the fraction of the order that is matched. That is, if an order to sell 1 UNO has a fee_provided of 0.01 UNO (a 1%), and that order matches for 0.5 UNO initially, then the fee_provided_remaining for that order will thenceforth be 0.005 UNO. Provided fees, however, are not replenished upon failure to make UNO payments, or their anti\u2010trolling effect would be voided."),(0,i.kt)("p",null,"Payments of unobtaniums to close order matches waiting for unobtaniums are done with a UNOpay message, which stores in its data field only the string concatenation of the transaction hashes which compose the Order Match which it fulfils."),(0,i.kt)("h3",{id:"issue"},"Issue"),(0,i.kt)("p",null,"Assets are issued with the issuance message type: the user picks a name and a quantity, and the protocol credits his address accordingly. The asset name must either be unique or be one previously issued by the same address. When re\u2010issuing an asset, that is, issuing more of an already\u2010issued asset, the divisibilities and the issuing address must match."),(0,i.kt)("p",null,"The rights to issue assets under a given name may be transferred to any other address."),(0,i.kt)("p",null,"Assets may be locked irreversibly against the issuance of further quantities and guaranteeing its holders against its inflation. To lock an asset, set the description to \u2018LOCK\u2019 (case\u2010insensitive)."),(0,i.kt)("p",null,"Issuances of any non\u2010zero quantity, that is, issuances which do not merely change, e.g., the description of the asset, involve a debit (and destruction) of now 0.5 XUP."),(0,i.kt)("p",null,"Asset descriptions in enhanced asset information schema may be of arbitrary length."),(0,i.kt)("h2",{id:"broadcast"},"Broadcast"),(0,i.kt)("p",null,"A broadcast message publishes textual and numerical information, along with a timestamp, as part of a series of broadcasts called a \u2018feed\u2019. One feed is associated with one address: any broadcast from a given address is part of that address\u2019s feed. The timestamps of a feed must increase monotonically."),(0,i.kt)("p",null,"Bets are made on the numerical values in a feed, which values may be the prices of a currency, or parts of a code for describing discrete possible outcomes of a future event, for example. One might describe such a code with a text like, \u2018US QE on 2014-01-01: dec=1, const=2, inc=3\u2019 and announce the results with \u2018US QE on 2014-01-01: decrease!\u2019 and a value of 1."),(0,i.kt)("p",null,"The publishing of a single broadcast with a textual message equal to \u2018LOCK\u2019 (case\u2010insensitive) locks the feed, and prevents it both from being the source of any further broadcasts and from being the subject of any new bets. (If a feed is locked while there are open bets or unsettled bet matches that refer to it, then those bets and bet matches will expire harmlessly.)"),(0,i.kt)("p",null,"The text field may be of arbitrary length."),(0,i.kt)("p",null,"A feed is identified by the address which publishes it."),(0,i.kt)("p",null,"Broadcasts with a value of -2 cancel all open bets on the feed. Broadcasts with a value of -3 cancel all pending bet matches on the feed. (This is equivalent to waiting for two weeks after the deadline.) Broadcasts with any other negative value are ignored for the purpose of bet settlement, but they still update the last broadcast time."),(0,i.kt)("h3",{id:"bet"},"Bet"),(0,i.kt)("p",null,"A bet is a wager that the value of a particular feed will be equal (or not equal) to a certain value \u2014 the target value \u2014 at the deadline. Bets have their wagers put in escrow upon being matched, and they are settled when the feed that they rely on passes the deadline."),(0,i.kt)("p",null,"Equal/NotEqual Bets cannot be leveraged. However, for two Bets to be matched, their leverage levels, deadlines and target values must be identical. Otherwise, they are matched the same way that orders are, except a Bet\u2019s odds are the multiplicative inverse of an order\u2019s price (odds = wager/counterwager): each Bet is matched, if possible, to the open Bet with the highest odds, as much as possible."),(0,i.kt)("p",null,"Target values must be non\u2010negative, and Bet Matches (contracts) are not affected by broadcasts with a value of -1."),(0,i.kt)("p",null,"Bets cannot have a deadline later than the timestamp of the last broadcast of the feed that they refer to."),(0,i.kt)("p",null,"Bets expire the same way that orders do, i.e. after a particular number of blocks. Bet Matches expire 2016 blocks after a block is seen with a block timestamp after its deadline."),(0,i.kt)("p",null,"Betting fees are proportional to the initial wagers, not the earnings. They are taken from, not added to, the quantities wagered."),(0,i.kt)("p",null,"Because of the block time, and the non\u2010deterministic way in which transactions are ordered in the blockchain, all contracts must not be incrementally settled, but the funds in question must be immediately put into escrow, and there must be a settlement date. Otherwise, one could see a price drop coming, and \u2018fight\u2019 to hide the funds that were going to be deducted.\nFeed fees are deducted from the final settlement amount."),(0,i.kt)("h3",{id:"dividend"},"Dividend"),(0,i.kt)("p",null,"A dividend payment is a payment of some quantity of any Unoparty asset (including UNO) to every holder of a an asset (except UNO or XUP) in proportion to the size of their holdings. Dividend\u2010yielding assets may be either divisible or indivisible. A dividend payment to any asset may originate from any address. The asset for dividend payments and the assets whose holders receive the payments may be the same. Unobtanium dividend payments do not employ the Unoparty protocol and so are larger and more expensive (in fees) than all other dividend payments."),(0,i.kt)("p",null,"TODO: dividends on escrowed funds\nThere is a small anti-spam fee of 0.0002 XUP per recipient with dividends."),(0,i.kt)("h3",{id:"burn"},"Burn"),(0,i.kt)("p",null,"Balances in Unoparty\u2019s native currency, \u2018XUP\u2019, will be initialised by \u2018burning\u2019 unobtaniums in miners\u2019 fees during a particular period of time using the a burn message type. The number of XUP earned per unobtanium is calculated thus:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"XUP_EARNED = UNO_BURNED * (2000 + ( 500 *\n             ((END_BLOCK - CURRENT_BLOCK) / (END_BLOCK - START_BLOCK))\n             ))\n")),(0,i.kt)("p",null,"END_BLOCK is the block after which the burn period is over (block #283810) and START_BLOCK is the block with which the burn period begins (block #278310). The earlier the burn, the better the price, which may be between 1000 and 1500 XUP/UNO."),(0,i.kt)("p",null,"Burn messages have precisely the string \u2018ProofOfBurn\u2019 stored in the OP_RETURN output."),(0,i.kt)("p",null,"new data\u2010less burn\nburn period is over"),(0,i.kt)("h3",{id:"cancel"},"Cancel"),(0,i.kt)("p",null,"Open offers may be cancelled, which cancellation is irrevocable."),(0,i.kt)("p",null,"A cancel message contains only the hash of the Unobtanium transaction that contains the order or bet to be cancelled. Only the address which made an offer may cancel it."),(0,i.kt)("h3",{id:"destroy"},"Destroy"),(0,i.kt)("p",null,"A destroy message sends a quantity of any Unoparty asset from the source address to the default burn address. If the sender does not hold a sufficient quantity of that asset at the time that the destroy message is parsed (in the sequence of transactions), then the destroy is considered invalid."),(0,i.kt)("h3",{id:"dispenser"},"Dispenser"),(0,i.kt)("p",null,"A dispenser message creates a special type of artifact on the unoparty db that watches an address for incoming main chain asset (UNO). When any UNO reaches a dispenser enabled address, the amount received gets divided by the dispenser mainchainrate (or satoshirate in the db). The quantity rounded down is the multiplier to give_quantity that is sent to the first address on the sending transaction. All dispensers that can match on an address are triggered by each UNO send that has a dispense multiplier of at least 1."),(0,i.kt)("p",null,"A dispenser can be in either of two status: 0 (open) or 10 (closed)."))}p.isMDXComponent=!0}}]);