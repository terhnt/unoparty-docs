"use strict";(self.webpackChunkunoparty_docs=self.webpackChunkunoparty_docs||[]).push([[564],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=u(r),f=a,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||o;return r?n.createElement(m,i(i({ref:t},s),{},{components:r})):n.createElement(m,i({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4642:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return u},assets:function(){return s},toc:function(){return p},default:function(){return f}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],c={sidebar_position:1},l="Platform Architecture",u={unversionedId:"advanced/architecture",id:"advanced/architecture",title:"Platform Architecture",description:"In the figure below you can see how all Unoparty platform components interact with each other.",source:"@site/docs/advanced/architecture.md",sourceDirName:"advanced",slug:"/advanced/architecture",permalink:"/unoparty-docs/docs/advanced/architecture",editUrl:"https://github.com/terhnt/unoparty-docs/tree/main/packages/create-docusaurus/templates/shared/docs/advanced/architecture.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"advanced",next:{title:"Protocol Specification",permalink:"/unoparty-docs/docs/advanced/protocol"}},s={},p=[{value:"unoparty-server",id:"unoparty-server",level:2},{value:"unoblock",id:"unoblock",level:2},{value:"Unowallet",id:"unowallet",level:2},{value:"armory_utxsvr",id:"armory_utxsvr",level:2}],d={toc:p};function f(e){var t=e.components,c=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,c,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"platform-architecture"},"Platform Architecture"),(0,o.kt)("p",null,"In the figure below you can see how all Unoparty platform components interact with each other."),(0,o.kt)("p",null,(0,o.kt)("img",{loading:"lazy",alt:"Architecture Image",src:r(357).Z,width:"1085",height:"568"})),(0,o.kt)("h2",{id:"unoparty-server"},"unoparty-server"),(0,o.kt)("p",null,"unoparty-server is the name for the combination of unoparty-lib and unoparty-cli. It serves as the reference client for Unoparty, and implements support for the core Unoparty protocol via a provided REST API and command line interface."),(0,o.kt)("h2",{id:"unoblock"},"unoblock"),(0,o.kt)("p",null,"unoblock provides additional services (required by unowallet and potentially other services) beyond those offered in the API provided by unoparty-server. It features a full-fledged JSON RPC-based API, and has an extensible architecture to support custom plugins."),(0,o.kt)("h2",{id:"unowallet"},"Unowallet"),(0,o.kt)("p",null,"Unowallet is a web wallet for Unobtanium (UNO) and Unoparty (XUP). It is being actively developed and currently implements most Unoparty features, such as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Fully functional wallet for UNO, XUP, and user-created tokens"),(0,o.kt)("li",{parentName:"ul"},"Peer-to-peer asset trading with algorithmic order matching (XUP, other assets)"),(0,o.kt)("li",{parentName:"ul"},"Custom asset creation"),(0,o.kt)("li",{parentName:"ul"},"Betting"),(0,o.kt)("li",{parentName:"ul"},"Broadcasting data on the Unobtanium Blockchain"),(0,o.kt)("li",{parentName:"ul"},"Multisig (Buggy)"),(0,o.kt)("li",{parentName:"ul"},"Offline (Armory) transactions (TODO)")),(0,o.kt)("h2",{id:"armory_utxsvr"},"armory_utxsvr"),(0,o.kt)("p",null,"A service used by unoblock with Unowallet to support Offline Armory transactions. This service requires Armory itself."))}f.isMDXComponent=!0},357:function(e,t,r){t.Z=r.p+"assets/images/platformarch-cce729825aa3e72b1eac42cf8ec93f8a.png"}}]);