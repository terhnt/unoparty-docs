"use strict";(self.webpackChunkunoparty_docs=self.webpackChunkunoparty_docs||[]).push([[995],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=i,f=p["".concat(u,".").concat(m)]||p[m]||l[m]||a;return t?r.createElement(f,o(o({ref:n},d),{},{components:t})):r.createElement(f,o({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1524:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return c},assets:function(){return d},toc:function(){return l},default:function(){return m}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],s={sidebar_position:4},u="How to send Unoparty assets in bulk",c={unversionedId:"advanced/sending-bulk",id:"advanced/sending-bulk",title:"How to send Unoparty assets in bulk",description:"Below is a script for constructing, signing and broadcasting a large number of sends efficiently. It assumes that the source addresses are in a (temporarily) unlocked Unobtanium Core wallet, to which a running instance of unopartyd is connected.",source:"@site/docs/advanced/sending-bulk.md",sourceDirName:"advanced",slug:"/advanced/sending-bulk",permalink:"/unoparty-docs/docs/advanced/sending-bulk",editUrl:"https://github.com/terhnt/unoparty-docs/tree/main/packages/create-docusaurus/templates/shared/docs/advanced/sending-bulk.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"advanced",previous:{title:"Command-line (CLI) Guide",permalink:"/unoparty-docs/docs/advanced/cli"},next:{title:"Getting started",permalink:"/unoparty-docs/docs/advanced/unonode/getting-started"}},d={},l=[{value:"Script",id:"script",level:2},{value:"CSV File",id:"csv-file",level:2},{value:"Instructions",id:"instructions",level:2}],p={toc:l};function m(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-send-unoparty-assets-in-bulk"},"How to send Unoparty assets in bulk"),(0,a.kt)("p",null,"Below is a script for constructing, signing and broadcasting a large number of sends efficiently. It assumes that the source addresses are in a (temporarily) unlocked Unobtanium Core wallet, to which a running instance of unopartyd is connected."),(0,a.kt)("p",null,"This script takes a single command-line argument of the CSV file from which to pull the sources, destinations, quantities, assets and fees."),(0,a.kt)("p",null,"Warning: This example is outdated as it used the previous addrindexrs_uno unobtanium branch, however, same principles apply to current mainline repo."),(0,a.kt)("h2",{id:"script"},"Script"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import csv\nimport sys\n\nfrom unopartylib.lib import util\nfrom unopartylib.lib import config\nfrom unopartylib.lib.backend import addrindex_uno\n\nconfig.BACKEND_URL = 'http://user:password@localhost:4120'\nconfig.BACKEND_SSL_NO_VERIFY = False\nconfig.TESTNET = False\nconfig.REQUESTS_TIMEOUT = 5\n\ndef unoparty_api(method, params):\n    return util.api(method, params)\n\ndef unobtanium_api(method, params):\n    return addrindex_uno.rpc(method, params)\n\ndef do_send(source, destination, asset, quantity, fee, encoding):\n    validateaddress = unobtanium_api('validateaddress', [source])\n    assert validateaddress['ismine']\n    pubkey = validateaddress['pubkey']\n    unsigned_tx = unoparty_api('create_send', {'source': source, 'destination': destination, 'asset': asset, 'quantity': quantity, 'pubkey': pubkey, 'allow_unconfirmed_inputs': True})\n    signed_tx = unobtanium_api('signrawtransaction', [unsigned_tx])['hex']\n    tx_hash = unobtanium_api('sendrawtransaction', [signed_tx])\n    return tx_hash\n\n\nwith open(sys.argv[1], 'r') as csvfile:\n      reader = csv.reader(csvfile)\n      print('{}|{}|{}'.format('linenum', 'input', 'result'))\n\n      for row in reader:\n            if reader.line_num == 1:                                            \n                  continue                                                        \n\n            source, destination, asset, quantity, fee = row\n            fee, quantity = int(fee), int(quantity)\n\n            try:\n                  tx_hash = do_send(source, destination, asset, quantity, fee, 'opreturn')\n            except Exception as e:\n                  tx_hash = str(e)\n\n            print('{}|{}|{}'.format(reader.line_num, ','.join(row), tx_hash))\n")),(0,a.kt)("h2",{id:"csv-file"},"CSV File"),(0,a.kt)("p",null,"All quantities are specified in satoshis. The format of the CSV file is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"source,destination,asset,quantity,fee\n  uVVuwXm2mDK9pr9XkWT5k7ihQyoSC8y2MW,uVVuwXm2mDK9pr9XkWT5k7ihQyoSC8y2MW,XUP,100000000,150\n  uVVuwXm2mDK9pr9XkWT5k7ihQyoSC8y2MW,uVVuwXm2mDK9pr9XkWT5k7ihQyoSC8y2MW,XUP,200000000,100\n")),(0,a.kt)("h2",{id:"instructions"},"Instructions"),(0,a.kt)("p",null,"Use this script on a system with unoparty-lib installed and in the ",(0,a.kt)("inlineCode",{parentName:"p"},"PYTHONPATH"),". (If using a Federated Node, this is possible by issuing the command ",(0,a.kt)("inlineCode",{parentName:"p"},"unonode shell unoparty")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"unonode shell unoparty-testnet")," as appropriate, and using the script in that shell.)"),(0,a.kt)("p",null,"If the CSV file with the data is called ",(0,a.kt)("inlineCode",{parentName:"p"},"input.csv"),", and the script is called ",(0,a.kt)("inlineCode",{parentName:"p"},"sendmany.py"),", then call this script with ",(0,a.kt)("inlineCode",{parentName:"p"},"$ python3 sendmany.py input.csv"),"."))}m.isMDXComponent=!0}}]);