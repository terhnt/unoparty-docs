"use strict";(self.webpackChunkunoparty_docs=self.webpackChunkunoparty_docs||[]).push([[834],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(n),f=o,h=p["".concat(l,".").concat(f)]||p[f]||c[f]||a;return n?r.createElement(h,s(s({ref:t},d),{},{components:n})):r.createElement(h,s({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},203:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},assets:function(){return d},toc:function(){return c},default:function(){return f}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],i={sidebar_position:3,id:"unowallet-notes"},l="Unowallet notes",u={unversionedId:"wallets/unowallet-notes",id:"wallets/unowallet-notes",title:"Unowallet notes",description:"More on multiple Unowallet servers",source:"@site/docs/wallets/unowallet-notes.md",sourceDirName:"wallets",slug:"/wallets/unowallet-notes",permalink:"/docs/wallets/unowallet-notes",editUrl:"https://github.com/terhnt/unoparty-docs/tree/main/packages/create-docusaurus/templates/shared/docs/wallets/unowallet-notes.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"unowallet-notes"},sidebar:"wallets",previous:{title:"Unowallet FAQ",permalink:"/docs/wallets/unowalletfaq"},next:{title:"Getting Started",permalink:"/docs/wallets/tuts/getting-started"}},d={},c=[{value:"Unowallet MultiAPI specifics",id:"unowallet-multiapi-specifics",level:2},{value:"multiAPIFailover for Read API (<code>get_</code>) Operations",id:"multiapifailover-for-read-api-get_-operations",level:3},{value:"multiAPIConsensus for Action/Write (<code>create_</code>) Operations",id:"multiapiconsensus-for-actionwrite-create_-operations",level:3},{value:"multiAPINewest for Redundant storage",id:"multiapinewest-for-redundant-storage",level:3}],p={toc:c};function f(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"unowallet-notes"},"Unowallet notes"),(0,a.kt)("p",null,"More on multiple Unowallet servers\nFor the time being, the Unoparty team itself operates the primary Unowallet platform at unowallet.io. However, as Unowallet is open source software, it is possible to host your own site with Unowallet site (for your personal use, or as an offering to others), or to even host your own Unowallet servers to use with your own Unoparty wallet implementation. The Unoparty team supports and encourages this kind of activity (as long as the servers are secure), as it aids with increasing decentralization."),(0,a.kt)("p",null,"Also note that due to the nature of Unowallet being a deterministic wallet, users using one Unowallet platform (i.e. the official one, for instance) have the flexibility to start using a different Unowallet platform instead at any time, and as funds (i.e. private keys) are not stored on the server in any fashion, they will be able to see their funds on either. (Note that the only thing that will not migrate are saved preferences, such as address aliases, the theme setting, etc.)"),(0,a.kt)("h2",{id:"unowallet-multiapi-specifics"},"Unowallet MultiAPI specifics"),(0,a.kt)("p",null,'Unowallet utilizes a sort of a "poor man\'s load balancing/failover" implementation called multiAPI (and implemented here). multiAPI can operate in a number of fashions.'),(0,a.kt)("h3",{id:"multiapifailover-for-read-api-get_-operations"},"multiAPIFailover for Read API (",(0,a.kt)("inlineCode",{parentName:"h3"},"get_"),") Operations"),(0,a.kt)("p",null,"multiAPIFailover functionality is currently used for all read API operations. In this model, the first Federated Node on the shuffled list is called for the data, and if it returns an error or the request times out, the second one on the list is called, and so on. The result of the first server to successfully return are used."),(0,a.kt)("p",null,'Here, a "hacked" server could be modified to return bogus data. As (until being discovered) the server would be in the shuffled list, some clients may end up consulting it. However, as this functionality is essentially for data queries only, the worse case result is that a Unowallet client is shown incorrect/modified data which leads to misinformed actions on the user\'s behalf. Moreover, the option always exists to move all read-queries to use multiAPIConsensus in the future should the need arise.'),(0,a.kt)("h3",{id:"multiapiconsensus-for-actionwrite-create_-operations"},"multiAPIConsensus for Action/Write (",(0,a.kt)("inlineCode",{parentName:"h3"},"create_"),") Operations"),(0,a.kt)("p",null,"Based on this multiAPI capability, the wallet itself consults more than one of these Federated Nodes via consensus especially for all create_-type operations. For example, if you send XUP, unoparty-server on each server is still composing and sending back the unsigned raw transaction, but for data security, it compares the results returned from all servers, and will only sign and broadcast (both client-side) if all the results match). This is known as multiAPIConsensus."),(0,a.kt)("p",null,"The ultimate goal here is to have a federated net of semi-trusted backend servers not tied to any one country, provider, network or operator/admin. Through requiring consensus on the unsigned transactions returned for all create_ operations, 'semi-trust' on a single server basis leads to an overall trustworthy network. Worst case, if backend server is hacked and owned (and the unoparty-server code modified), then you may get some invalid read results, but it won't be rewriting your XUP send destination address, for example. The attackers would have to hack the code on every single server in the same exact way, undetected, to do that."),(0,a.kt)("p",null,"Moreover, the Unowallet web client contains basic transaction validation code that will check that any unsigned Unobtanium transaction returned from a Unoblock Federated Node contains expected inputs and outputs. This provides further protection against potential attacks."),(0,a.kt)("p",null,'multiAPIConsensus actually helps discover any potential "hacked" servers as well, since a returned consensus set with a divergent result will be rejected by the client, and thus trigger an examination of the root cause by the team.'),(0,a.kt)("h3",{id:"multiapinewest-for-redundant-storage"},"multiAPINewest for Redundant storage"),(0,a.kt)("p",null,'In the same way, these multiple servers are used to provide redundant storage of client-side preferences, to ensure we have no single point of failure. In the case of the stored preferences for instance, when retrieved on login, the data from all servers is taken in, and the newest result is used. This multiAPINewest functionality effectively makes a query across all available Federated Nodes, and chooses the newest result (based on a "last updated"-type timestamp).'),(0,a.kt)("p",null,'Note that with this, a "hacked" server could be modified to always return the latest timestamp, so that its results were used. However, wallet preferences (and other data stored via this functionality) is non-sensitive, and thus user\'s funds would not be at risk before the hacked server could be discovered and removed.'))}f.isMDXComponent=!0}}]);